yalla.framework.addComponent("/dist/component/attachments/home",function(){function ComponentEvent(type,data,target,currentTarget){this.data=data,this.target=target,this.type=type,this.currentTarget=currentTarget}function initState(){return{}}function onPropertyChange(){}function initState(props){var self=this;props.onSave&&props.onSave.subscribe(onSaveEvent.bind(self)),props.alert&&props.alert.onError.subscribe(errorSelector.bind(this));var ms=(isNaN(parseInt(props.maxSize))?1e6:props.maxSize).toString().toLowerCase();return ms=parseInt(ms)*(ms.indexOf("g")>=0?1e9:ms.indexOf("m")>=0?1e6:ms.indexOf("k")>=0?1e3:1),{newFiles:[],delFiles:[],curFiles:null,collection:props.collection,userId:props.userId,maxSize:ms,maxFile:isNaN(parseInt(props.maxFile))?5:parseInt(props.maxFile),name:props.name,error:null,attachmentList:props.attachmentList,fileTypes:[{ext:".jpg",type:"image/jpg"},{ext:".jpeg",type:"image/jpeg"}]}}function errorSelector(errors){if(this._state.error=null,errors)for(var i in errors)(this._state.name&&errors[i].name==this._state.name||this._state.alias&&errors[i].name==this._state.alias)&&(this._state.error=errors[i].message,errors.splice(i,1))}function loadFiles(){var self=this;return new Promise(function(resolve){var q={};self.state.userId&&(q.uploaderId=self.state.userId,self.state.attachmentList&&(q.id={$in:self.state.attachmentList})),dpd[self.state.collection].get(q,function(data){self.state.curFiles=data,resolve(data)})})}function onDelete(event){this.state.delFiles=this.state.delFiles.concat(event.data)}function onUndelete(event){var i=this.state.delFiles.indexOf(event.data);i>=0&&this.state.delFiles.splice(i,1)}function onAddFile(){var form=this.target.form;this.state.newFiles=this.state.newFiles.concat(form.elements.addFile.files[0]),form.reset(),$patchChanges("newFiles")}function onCancelAdd(event){var i=this.state.newFiles.indexOf(event.data);i>=0&&this.state.newFiles.splice(i,1),$patchChanges("newFiles")}function onSaveEvent(fnc){var self=this;if(this._state.curFiles.length+this._state.newFiles.length-this._state.delFiles.length>this._state.maxFile)fnc({name:self._state.name,message:"You can upload only "+this._state.maxFile+" file"+(this._state.maxFile>1?"s":"")});else{for(var i in this._state.newFiles){var f=this._state.newFiles[i];if(!this._state.fileTypes.find(function(t){return f.name.substr(f.name.length-t.ext.length).toLowerCase()==t.ext.toLowerCase()}))return void fnc(null,{name:this._state.name,message:"The file type of "+this._state.newFiles[i].name+" is not supported."});if(this._state.newFiles[i].size>this._state.maxSize)return void fnc(null,{name:this._state.name,message:this._state.newFiles[i].name+" ("+this._state.newFiles[i].size.toGMKByte()+") is too large. Max size is "+this._state.maxSize.toGMKByte()})}Promise.all(deleteFiles.bind(this)().concat(saveFiles.bind(this)())).then(function(results){var r=[];self._state.curFiles.forEach(function(x){r.push(x.id)});var added=results.find(function(x){return x&&x.hasOwnProperty("add")});added&&added.add.forEach(function(x){r.push(x)}),results.filter(function(x){return x&&x.hasOwnProperty("del")}).forEach(function(x){r=r.filter(function(i){return i!=x.del})}),$patchChanges("newFiles"),$patchChanges("existingFiles"),fnc(r)}).catch(function(err){$patchChanges("newFiles"),$patchChanges("existingFiles"),fnc(null,err)})}}function deleteFiles(){var self=this,promises=[];for(var i in self._state.delFiles)promises.push(new Promise(function(resolve,reject){dpd[self._state.collection].del(self._state.delFiles[i].id,function(res,err){if(err)reject({name:self._state.name,message:err});else{var delFile=self._state.delFiles.find(function(x){return res.message.indexOf(x.filename)>0});self._state.delFiles.find(function(x){return res.message.indexOf(x.filename)>0}),resolve({del:delFile?delFile.id:null})}})}));return promises}function saveFiles(){var self=this;return[new Promise(function(resolve,reject){var fd=new FormData;if(self._state.newFiles.length>0){for(var i in self._state.newFiles)fd.append("uploadedFile",self._state.newFiles[i]);var xhr=new XMLHttpRequest;xhr.open("PUT","/"+self._state.collection),xhr.onload=function(){var response=JSON.parse(this.responseText);if(this.status<300){var results=[];response.forEach(function(x){results.push(x.id)}),self._state.newFiles.length=0,resolve({add:results})}else reject({name:self._state.name,message:response.message})},xhr.onerror=function(err){reject({name:self._state.name,message:err})},xhr.send(fd)}else resolve()})]}function $render(_props){_context.list=$inject("/component/attachments/list"),_context.list,_context.entry=$inject("/component/entry"),_context.entry,_elementOpenStart("div",""),_attr("element","dist.component.attachments.home"),_elementOpenEnd("div");var _component=IncrementalDOM.currentElement(),_validComponent=yalla.framework.validComponentName(_component,_elementName);_component._state=_component._state&&_validComponent?_component._state:initState.bind(_component)(_props),_component._state._name=_elementName;var _state=_component._state,_self={component:_component,properties:_props,state:_component._state};_validComponent&&yalla.framework.propertyCheckChanges(_component._properties,_props,onPropertyChange.bind(_self)),_component._properties=_props,function(){function asyncFunc_1(data){if(_elementOpenStart("div",""),_attr("class","container"),_elementOpenEnd("div"),_params={naked:"naked",type:"label",prompt:_props.prompt},_context.entry.render("object"==typeof arguments[1]?_merge(arguments[1],_params):_params,function(){}),_elementClose("div"),_elementOpenStart("div",""),_elementOpenEnd("div"),yalla.framework.registerRef("existingFiles",IncrementalDOM.currentElement(),function(){var _params={list:data,folder:_props.folder,ondelete:function(event){var self={target:event.target};self.properties=_props,"elements"in self.target&&(self.elements=self.target.elements),self.currentTarget=this==event.target?self.target:_parentComponent(event.currentTarget),self.component=_component,self.component._state=self.component._state||{},self.state=self.component._state,self.emitEvent=function(eventName,data){var event=new ComponentEvent(eventName,data,self.target,self.currentTarget);"on"+eventName in _props&&_props["on"+eventName](event)},onDelete.bind(self)(event)},onundelete:function(event){var self={target:event.target};self.properties=_props,"elements"in self.target&&(self.elements=self.target.elements),self.currentTarget=this==event.target?self.target:_parentComponent(event.currentTarget),self.component=_component,self.component._state=self.component._state||{},self.state=self.component._state,self.emitEvent=function(eventName,data){var event=new ComponentEvent(eventName,data,self.target,self.currentTarget);"on"+eventName in _props&&_props["on"+eventName](event)},onUndelete.bind(self)(event)},readonly:_props.readonly};_context.list.render("object"==typeof arguments[1]?_merge(arguments[1],_params):_params,function(){})})(),_elementClose("div"),_elementOpenStart("div",""),_elementOpenEnd("div"),yalla.framework.registerRef("newFiles",IncrementalDOM.currentElement(),function(){var _params={list:_state.newFiles,oncancelAdd:function(event){var self={target:event.target};self.properties=_props,"elements"in self.target&&(self.elements=self.target.elements),self.currentTarget=this==event.target?self.target:_parentComponent(event.currentTarget),self.component=_component,self.component._state=self.component._state||{},self.state=self.component._state,self.emitEvent=function(eventName,data){var event=new ComponentEvent(eventName,data,self.target,self.currentTarget);"on"+eventName in _props&&_props["on"+eventName](event)},onCancelAdd.bind(self)(event)}};_context.list.render("object"==typeof arguments[1]?_merge(arguments[1],_params):_params,function(){})})(),_elementClose("div"),_props.readonly||(_elementOpenStart("div",""),_elementOpenEnd("div"),_elementOpenStart("form",""),_elementOpenEnd("form"),_params={type:"file",name:"addFile",accept:"image/jpeg, image/jpg",onchange:function(event){var self={target:event.target};self.properties=_props,"elements"in self.target&&(self.elements=self.target.elements),self.currentTarget=this==event.target?self.target:_parentComponent(event.currentTarget),self.component=_component,self.component._state=self.component._state||{},self.state=self.component._state,self.emitEvent=function(eventName,data){var event=new ComponentEvent(eventName,data,self.target,self.currentTarget);"on"+eventName in _props&&_props["on"+eventName](event)},onAddFile.bind(self)()}},_context.entry.render("object"==typeof arguments[1]?_merge(arguments[1],_params):_params,function(){}),_elementClose("form"),_elementClose("div")),_elementOpenStart("div",""),_attr("class","container"),_elementOpenEnd("div"),_elementOpenStart("div",""),_attr("class","row"),_elementOpenEnd("div"),_state.error){var _params={type:"label",class:"custom-entry-prompt custom-error-text",prompt:_state.error};_context.entry.render("object"==typeof arguments[1]?_merge(arguments[1],_params):_params,function(){})}_elementClose("div"),_elementClose("div")}var node={element:IncrementalDOM.currentElement(),pointer:IncrementalDOM.currentPointer()}.element,self={target:node};self.properties=_props,"elements"in self.target&&(self.elements=self.target.elements),self.currentTarget=self.target,self.component=_component,self.component._state=self.component._state||{},self.state=self.component._state;var promise=loadFiles.bind(self)();promise&&"object"==typeof promise&&"then"in promise?(_skip(),promise.then(function(_result){$patchChanges(node,function(){asyncFunc_1.call(self,_result)})}).catch(function(){})):asyncFunc_1.call(self,promise)}(),_elementClose("div")}var $patchChanges=yalla.framework.renderToScreen,$inject=yalla.framework.createInjector("/dist/component/attachments/home"),$export={},_elementName="dist.component.attachments.home",_context={},_parentComponent=yalla.framework.getParentComponent,_merge=yalla.utils.merge,_elementClose=(IncrementalDOM.elementOpen,IncrementalDOM.elementClose),_elementOpenStart=IncrementalDOM.elementOpenStart,_elementOpenEnd=IncrementalDOM.elementOpenEnd,_attr=(IncrementalDOM.elementVoid,IncrementalDOM.text,IncrementalDOM.attr),_skip=IncrementalDOM.skip;return"function"==typeof $render&&($export.render=$render),$export}());