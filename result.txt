starting deployd v0.8.9...
Http to Https Forwarder is listening on port 80
listening on port  443
type help for a list of commands
dpd > server.js:152: dan di sini kah? undefined
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 573,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3265,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
server.js:152: dan di sini kah? undefined
server.js:152: dan di sini kah? undefined
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 1715,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1143,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3431,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3426,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/version.ver',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 583,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3431,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/js/own/storages.js',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
server.js:152: dan di sini kah? undefined
server.js:152: dan di sini kah? undefined
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 392,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1100,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Object],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 2107,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 3811,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 473,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 474,
        [Symbol(triggerId)]: 455 },
     _idleStart: 3808,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 472,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 2107,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1748,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3252,
        handshakes: 0,
        onerror: [Function],
        sni_context: SecureContext {},
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 392,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 3808,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 981,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 982,
        [Symbol(triggerId)]: 455 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3811,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 473,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 474,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/asset/img/image5.jpg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
server.js:152: dan di sini kah? undefined
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:48: route handleSession ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else ServerResponse {
  domain: 
   Domain {
     domain: null,
     _events: { error: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     members: [ [Object], [Circular] ] },
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  connection: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: [Object],
        isServer: true,
        server: [Object],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: [Function],
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: [Array],
        end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 12,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        [Symbol(asyncId)]: 980,
        [Symbol(bytesRead)]: 0 },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _bytesDispatched: 3394,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        scheduledJobs: [Object],
        resources: [Array],
        router: [Object],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 455 },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 1617,
        _externalStream: [External],
        fd: -1,
        _parent: [Object],
        _parentWrap: [Object],
        _secureContext: [Object],
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 3430,
        handshakes: 0,
        onerror: [Function],
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4121,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Object],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 981,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 982,
     [Symbol(triggerId)]: 455 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  cookies: 
   Cookies {
     secure: undefined,
     request: 
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: [Object],
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/bookings?userId=fd955df2e9163a1f',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        cookies: [Circular],
        query: [Object],
        session: [Object],
        _routed: true },
     response: [Circular] },
  [Symbol(outHeadersKey)]: { 'set-cookie': [ 'Set-Cookie', [Array] ] } }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:48: route handleSession { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
router.js:52: route else { setHeader: [Function: setHeader],
  end: [Function: end],
  internal: true,
  headers: {},
  on: [Function: on] }
Terminate batch job (Y/N)? 
